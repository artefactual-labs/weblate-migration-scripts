#!/bin/bash
#
# Export XLIFF files translated by Weblate into an AtoM repository

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

usage() {
    echo "Exports XLIFF from the Weblate repository to AtoM."
    echo ""
    echo "$0"
    echo "    -h --help"
    echo "    --atom-dir=<path>"
    echo "    --weblate-dir=<path>"
    echo "    [--approved]"
    echo "    [--language=<language code>]"
    echo "    [--commit-with-message=<message>]"
    echo "    [--no-pull]"
    echo "    [--no-push]"
    echo "    [--skip-version-check]"
    echo ""
    echo "The --commit-with-message will automatically commit any XLIFF changed"
    echo "    using the specified message."
    echo
    echo "The --no-pull option skips optional git pulls."
}

# Parse command-line options
LANG_CODE="all"
APPROVED=false
APPROVED_OPTION=""
NO_PULL=false
NO_PUSH=false
SKIP_VERSION_CHECK=false
COMMIT_WITH_MESSAGE=false
ATOM_SOURCE_DIR=".tx/i18n"

while [ "$1" != "" ]; do
    # Attempt to parse out value
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`

    # Handle when equal sign wasn't used to set option value
    if [ -n "$CURRENT_OPTION" ]; then
      VALUE=$PARAM
      PARAM=$CURRENT_OPTION
      unset CURRENT_OPTION
    fi

    # Process option
    case $PARAM in
        -h | --help)
            usage
            exit
            ;;
        --atom-dir)
            ATOM_DIR=$VALUE
            ;;
        --weblate-dir)
            WEBLATE_DIR=$VALUE
            ;;
        --language)
            LANG_CODE=$VALUE
            ;;
        --commit-with-message)
            COMMIT_WITH_MESSAGE=$VALUE
            ;;
        --approved)
            APPROVED=true
            VALUE=true
            ;;
        --no-pull)
            NO_PULL=true
            VALUE=true
            ;;
        --no-push)
            NO_PUSH=true
            VALUE=true
            ;;
        --skip-version-check)
            SKIP_VERSION_CHECK=true
            VALUE=true
            ;;
        *)
            echo "ERROR: unknown parameter \"$PARAM\""
            usage
            exit 1
            ;;
    esac

    # Handle null values
    if [ -z "$VALUE" ]; then
        CURRENT_OPTION=$PARAM
    fi

    shift
done

if [ "$APPROVED" = true ]; then
  APPROVED_OPTION="--approved"
else
  echo "*******************************************************************"
  echo "WARNING: If --approved flag isn't set, even unapproved translation"
  echo "         units will be exported."
  echo "*******************************************************************"
  echo
fi

# Require specification of both the AtoM repo directory and the Weblate repo directory
if [ -z $ATOM_DIR ] || [ -z $WEBLATE_DIR ]; then
    usage
    exit 1
fi

# Note initial directory
INITIAL_DIRECTORY=`pwd`

# Set default commit message (if .git/hooks/prepare-commit-msg is set to prepend it)
export GIT_COMMIT_PREPEND="Imported XLIFF files from Weblate."

# Get absolute path to AtoM dir and abort if directory doesn't exist
ATOM_DIR=`realpath $ATOM_DIR`
if [ ! -d $ATOM_DIR ] ; then
    echo "The AtoM directory specified doesn't exist."
    exit
fi

# Get absolute path to Weblate dir and abort if directory doesn't exist
WEBLATE_DIR=`realpath $WEBLATE_DIR`
if [ ! -d $WEBLATE_DIR ] ; then
    echo "The Weblate directory specified doesn't exist."
    exit
fi

# Change to AtoM directory, take note of branch, and guess version
cd $ATOM_DIR
ATOM_BRANCH=`git rev-parse --symbolic-full-name --abbrev-ref HEAD`
ATOM_VERSION=`basename $ATOM_BRANCH`
echo "Currently in the '$ATOM_BRANCH' branch of the AtoM repo..."

# Take note of Weblate repo's branch
cd $WEBLATE_DIR
WEBLATE_BRANCH=`git rev-parse --symbolic-full-name --abbrev-ref HEAD`
echo "Currently in the '$WEBLATE_BRANCH' branch of the Weblate repo..."
echo

# Exit if estimated AtoM version doesn't match name of Weblate branch
if [ "$ATOM_VERSION" != "$WEBLATE_BRANCH" ] && [ "$SKIP_VERSION_CHECK" = false ]; then
    echo "Estimated AtoM version (using basename of AtoM branch) is '$ATOM_VERSION' and doesn't match name of checked out Weblate branch."
    exit 1
fi

if [ "$NO_PULL" = false ]; then
    # Offer to update the Weblate repo
    while true; do
        read -p "Do you wish to 'git pull --rebase' to update the Weblate repo before exporting from it? " yn
        case $yn in
            [Yy]* ) git pull --rebase; echo; break;;
            [Nn]* ) echo; break;;
            * ) echo "Please answer yes or no.";;
        esac
    done

    # Offer to update the AtoM repo
    cd $ATOM_DIR
    while true; do
        read -p "Do you wish to 'git pull --rebase' to update the AtoM repo before exporting to it? " yn
        case $yn in
            [Yy]* ) git pull --rebase; echo; break;;
            [Nn]* ) echo; break;;
            * ) echo "Please answer yes or no.";;
        esac
    done
fi

# Extract all translations to .tx folder before comparison to Weblate's strings.
phing i18n-push-translations

# Compare AtoM XLIFF to Weblate XLIFF to see if an import is needed
$SCRIPT_DIR/scripts/compare $APPROVED_OPTION --no-warning --language="$LANG_CODE" $ATOM_DIR/$ATOM_SOURCE_DIR $WEBLATE_DIR/i18n

# Import if Atom's not up to date
if [ $? -ne 0 ]
then

    # Export XLIFF to AtoM
    $SCRIPT_DIR/scripts/migrate --export --language="$LANG_CODE" $APPROVED_OPTION $WEBLATE_DIR/i18n $ATOM_DIR/$ATOM_SOURCE_DIR

    # Split .tx files into /apps/qubit/i18n and plugin i18n folders.
    phing i18n-pull-translations

    #######################################
    # Commit and push imported XLIFF files.
    # Optional parameter: commit message
    #######################################
    function commit_and_push () {
        git add apps/qubit/i18n
        git add plugins
        git add data/fixtures
        if [[ ${!1} ]];then
          git commit -m "$1"
        else
          git commit;
        fi
        git push
    }

    # Offer to commit and push changes if XLIFF was imported successfully
    if [ $? -eq 0 ]
    then
        cd $ATOM_DIR

        echo

        if [ "$NO_PUSH" = false ]; then
            if [ "$COMMIT_WITH_MESSAGE" = false ]; then
                while true; do
                    read -p "Do you wish to commit the changes to the AtoM repo and push them? " yn
                    case $yn in
                        [Yy]* ) commit_and_push; break;;
                        [Nn]* ) exit;;
                        * ) echo "Please answer yes or no.";;
                    esac
                done
            else
                commit_and_push "$COMMIT_WITH_MESSAGE"
            fi
        fi
    fi
else
    echo "No export needed."
fi

# Return to inital directory
cd $INITIAL_DIRECTORY
