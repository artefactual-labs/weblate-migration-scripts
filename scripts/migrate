#!/usr/bin/php
<?php

include('include/helpers.inc.php');

function migrate($fromI18nDir, $toI18nDir, $options = array())
{
  abortIfDirectoryDoesNotExist($toI18nDir);

  // Cycle through each AtoM language directory
  print "Attempting to cycle through language directories in ". $fromI18nDir ."...\n";
  try {
    $dir = new DirectoryIterator($fromI18nDir);
  }
  catch(Exception $e) {
    abort('Unable to access '. $fromI18nDir);
  }

  $count = 0;

  foreach ($dir as $fileinfo)
  {
    if (!$fileinfo->isDot()) {
      $langDir = $fileinfo->getFilename();

      // If a language is specified, skip if this isn't the one
      if (isset($options['language']) && $options['language'] != 'all' && $options['language'] != $langDir) {
        print "Skipped language '". $langDir ."'.\n";
        continue;
      }

      // There's no need to migrate English as it doesn't need to be translated
      if (is_dir($fromI18nDir . DIRECTORY_SEPARATOR . $langDir) && $langDir != 'en') {
        // Each language's XLIFF file'll end up in a subdir of the i18n directory
        $destLangDir = $toI18nDir . DIRECTORY_SEPARATOR . $langDir;

        // Create destination language directory if it doesn't exist
        if (!is_dir($destLangDir)) {
          mkdir($destLangDir);
          print "Created ". $destLangDir ."\n";
        }

        $langFileRelativePath = $langDir . DIRECTORY_SEPARATOR . "messages.xml";
        $fromFile = $fromI18nDir . DIRECTORY_SEPARATOR . $langFileRelativePath;
        $toFile = $toI18nDir . DIRECTORY_SEPARATOR . $langFileRelativePath;

        print "Migrating ". $fromFile . " -> " . $toFile ."\n";

        // 'Approved' can only be set on export. Only relevant when moving strings
        // from Weblate -> AtoM.
        if (!empty($options['approved']) && !empty($options['export'])) {
            print "Omitting unapproved strings.\n";
            filterUnapprovedTransUnits($fromFile);
        }

        if (!empty($options['overwrite'])) {
          copy($fromFile, $toFile);
        }
        else if (!empty($options['merge'])) {
          if (!file_exists($toFile)) {
            print "Copying file from : " . $fromFile . "\n";
            copy($fromFile, $toFile);
          }
          else {
            print "Merging files into: " . $toFile . "\n";
            mergeXliff($fromFile, $toFile, !empty($options['export']));
          }
        }

        if (!empty($options['remove-translated'])) {
          removeTranslatedAttribute($toFile);
        }

        if (!empty($options['import'])) {
          formatXliffForWeblate($toFile);
        }

        if (!empty($options['export'])) {
          formatXliffForAtom($toFile, $options);
        }

        if (!empty($options['debug'])) {
          print 'DEBUG: Updated '. $toFile ." (". filesize($toFile) ." bytes)\n";
        }

        $count++;
      }
    }
  }

  return $count;
}

$parsed = parseArgs($argv);
$args = $parsed['args'];
$flags = $parsed['flags'];

$fromDirectory = (isset($args[0])) ? $args[0] : null;
$toDirectory   = (isset($args[1])) ? $args[1] : null;

if (empty($fromDirectory) || empty($toDirectory)) {
  abort("Usage: ". basename(__FILE__) . " [--import|--export] [--overwrite|--merge] [--approved] [--language=<language code>] [--debug] <from directory> <to directory>\n");
}

if (empty($flags['overwrite']) && empty($flags['merge'])) {
  abort('Either the --merge or --overwrite flag should be used with this script.');
}

if (empty($flags['import']) && empty($flags['export'])) {
  abort('Either the --import or --export flag should be used with this script.');
}

if (empty($flags['export']) && !empty($flags['approved'])) {
  abort("The --approved flag (export translation units marked 'approved') only works with --export.\n");
}

if (!empty($flags['import'])) {
  print "Importing from AtoM...\n";
  if (!empty($flags['overwrite'])) {
    print "The 'approved' attributes will be added for translated units.\n";
  }
}
elseif (!empty($flags['export'])) {
  print "Exporting to AtoM...\n";
  if (!empty($flags['overwrite'])) {
    print "The 'approved' attributes will be removed from translation units.\n";
  }
}

if (!empty($flags['merge'])) {
  print "Merging XLIFF files...\n";
}
else {
  print "Overwriting any XLIFF files...\n";
}

$count = migrate($fromDirectory, $toDirectory, $flags);

print("Done: migrated ". $count ." XLIFF files.\n");
