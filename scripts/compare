#!/usr/bin/php
<?php

include('include/helpers.inc.php');

function countSubdirectories($directory)
{
  $count = 0;

  $dirIterator = new DirectoryIterator($directory);

  foreach($dirIterator as $fileInfo)
  {
    if (!$fileInfo->isDot() && $fileInfo->isDir())
    {
      $count++;
    }
  }

  return $count;
}

function compare_translation_unit_data($a, $b)
{
  // Compare all text, instead of just source, in case there are duplicate
  // source strings in translation unit data
  $aText = $a['source'];
  $aText .= (isset($a['note'])) ? $a['note'] : '';
  $aText .= (isset($a['target'])) ? $a['target'] : '';

  $bText = $b['source'];
  $bText .= (isset($b['note'])) ? $b['note'] : '';
  $bText .= (isset($b['target'])) ? $b['target'] : '';

  return $aText > $bText;
}

function xliff_trans_units_as_json($file)
{
  // Load translation units from XML file
  $xml = simplexml_load_file($file);
  $elements = $xml->xpath("/xliff/file/body/trans-unit");

  // Consolidate translation units into array
  $transUnits = array();

  foreach ($elements as $element)
  {
    $transUnit = array();

    if (count($element->xpath('source')))
    {
      $transUnit['source'] = trim($element->xpath('source')[0]->__toString());
    }

    if (count($element->xpath('target')))
    {
      $transUnit['target'] = trim($element->xpath('target')[0]->__toString());
    }

    if (count($element->xpath('note')))
    {
      $transUnit['note'] = trim($element->xpath('note')[0]->__toString());
    }

    array_push($transUnits, $transUnit);
  }

  // Sort array by source string and return as JSON
  usort($transUnits, "compare_translation_unit_data");
  return json_encode($transUnits, JSON_PRETTY_PRINT);
}

function compare($fromI18nDir, $toI18nDir, $options = array())
{
  // Make sure destination directory exists
  if (!is_dir($toI18nDir))
  { 
    abort('No "'. $toI18nDir .'" directory.');
  }

  // Cycle through each AtoM language directory
  print "Attempting to cycle through language directories in ". $fromI18nDir ."...\n";
  try
  {
    $dir = new DirectoryIterator($fromI18nDir);
  }
  catch(Exception $e)
  {
    abort('Unable to access '. $fromI18nDir);
  }

  if (countSubdirectories($fromI18nDir) != countSubdirectories($toI18nDir))
  {
    print "i18n directories have a different number of subdirectories.\n";
    return false;
  }

  $compareCount = 0;

  foreach ($dir as $fileinfo)
  {
    if (!$fileinfo->isDot()) {
      $langDir = $fileinfo->getFilename();

      // There's no need to migrate English as it doesn't need to be translated
      if (is_dir($fromI18nDir . DIRECTORY_SEPARATOR . $langDir) && $langDir != 'en')
      {
        // Each language's XLIFF file'll end up in a subdir of the i18n directory
        $destLangDir = $toI18nDir . DIRECTORY_SEPARATOR . $langDir;

        // Create destination language directory if it doesn't exist
        if (!is_dir($destLangDir))
        {
          print "Compare could not complete: directory not found: ". $destLangDir ."\n";
          return false;
        }

        // Copy AtoM's XLIFF file to temp file, reformatting it to Weblate
        $langFileRelativePath = $langDir . DIRECTORY_SEPARATOR . "messages.xml";
        $fromFile = $fromI18nDir . DIRECTORY_SEPARATOR . $langFileRelativePath;
        $fromTmpFile = tempnam(sys_get_temp_dir(), 'xliffcomparefrom');
        file_put_contents($fromTmpFile, xliff_trans_units_as_json($fromFile));

        // Copy Weblate's XLIFF file to temp file
        $toFile = $toI18nDir . DIRECTORY_SEPARATOR . $langFileRelativePath;
        $toTmpFile = tempnam(sys_get_temp_dir(), 'xliffcompareto');
        file_put_contents($toTmpFile, xliff_trans_units_as_json($toFile));

        if (!empty($options['debug']))
        {
          print 'DEBUG: Normalized and compared '. $fromFile .' ('. filesize($fromTmpFile) .' bytes) to '. $toFile .' ('. filesize($toTmpFile) ." bytes)\n";
        }

        if (sha1_file($fromTmpFile) != sha1_file($toTmpFile))
        {
          return false;
        }

        if (empty($options['debug']))
        {
          unlink($fromTmpFile);
          unlink($toTmpFile);
        }

        $compareCount++;
      }
    }
  }

  return $compareCount;
}

$parsed = parseArgs($argv);
$args = $parsed['args'];
$flags = $parsed['flags'];

$atomDirectory = (isset($args[0])) ? $args[0] : null;
$weblateDirectory   = (isset($args[1])) ? $args[1] : null;

if (empty($atomDirectory) || empty($weblateDirectory))
{
  abort("Usage: ". basename(__FILE__) . " <AtoM i18n directory> <Weblate i18n directory>\n");
}

$compareCount = compare($atomDirectory, $weblateDirectory, $flags);

if ($compareCount)
{
  print "Done: compared ". $compareCount ." XLIFF files.\n";
}
else
{
  print "Difference detected.\n";
  exit(1);
}
